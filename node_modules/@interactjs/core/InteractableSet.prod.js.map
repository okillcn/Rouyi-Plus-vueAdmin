{
	"version": 3,
	"names": [
		"arr",
		"domUtils",
		"extend",
		"is",
		"InteractableSet",
		"list",
		"selectorMap",
		"scope",
		"constructor",
		"this",
		"addListeners",
		"interactable",
		"target",
		"_context",
		"context",
		"targetMappings",
		"string",
		"id",
		"targetIndex",
		"findIndex",
		"m",
		"splice",
		"new",
		"options",
		"actions",
		"Interactable",
		"document",
		"events",
		"mappingInfo",
		"addDocument",
		"_doc",
		"push",
		"Object",
		"defineProperty",
		"value",
		"configurable",
		"fire",
		"win",
		"_win",
		"get",
		"isSelector",
		"found",
		"find",
		"inContext",
		"forEachMatch",
		"node",
		"callback",
		"ret",
		"element",
		"matchesSelector",
		"undefined"
	],
	"sources": [
		"InteractableSet.ts"
	],
	"sourcesContent": [
		"import type { Interactable } from '@interactjs/core/Interactable'\nimport type { OptionsArg, Options } from '@interactjs/core/options'\nimport type { Scope } from '@interactjs/core/scope'\nimport type { Target, Context } from '@interactjs/core/types'\nimport * as arr from '@interactjs/utils/arr'\nimport * as domUtils from '@interactjs/utils/domUtils'\nimport extend from '@interactjs/utils/extend'\nimport is from '@interactjs/utils/is'\n\ndeclare module '@interactjs/core/scope' {\n  interface SignalArgs {\n    'interactable:new': {\n      interactable: Interactable\n      target: Target\n      options: OptionsArg\n      win: Window\n    }\n  }\n}\n\ninterface InteractableScopeProp {\n  context: Context\n  interactable: Interactable\n}\n\nexport class InteractableSet {\n  // all set interactables\n  list: Interactable[] = []\n\n  selectorMap: {\n    [selector: string]: InteractableScopeProp[]\n  } = {}\n\n  scope: Scope\n\n  constructor (scope: Scope) {\n    this.scope = scope\n    scope.addListeners({\n      'interactable:unset': ({ interactable }) => {\n        const { target, _context: context } = interactable\n        const targetMappings: InteractableScopeProp[] = is.string(target)\n          ? this.selectorMap[target]\n          : (target as any)[this.scope.id]\n\n        const targetIndex = arr.findIndex(targetMappings, (m) => m.context === context)\n        if (targetMappings[targetIndex]) {\n          // Destroying mappingInfo's context and interactable\n          targetMappings[targetIndex].context = null\n          targetMappings[targetIndex].interactable = null\n        }\n        targetMappings.splice(targetIndex, 1)\n      },\n    })\n  }\n\n  new (target: Target, options?: any): Interactable {\n    options = extend(options || {}, {\n      actions: this.scope.actions,\n    })\n    const interactable = new this.scope.Interactable(target, options, this.scope.document, this.scope.events)\n    const mappingInfo = { context: interactable._context, interactable }\n\n    this.scope.addDocument(interactable._doc)\n    this.list.push(interactable)\n\n    if (is.string(target)) {\n      if (!this.selectorMap[target]) {\n        this.selectorMap[target] = []\n      }\n      this.selectorMap[target].push(mappingInfo)\n    } else {\n      if (!(interactable.target as any)[this.scope.id]) {\n        Object.defineProperty(target, this.scope.id, {\n          value: [],\n          configurable: true,\n        })\n      }\n\n      ;(target as any)[this.scope.id].push(mappingInfo)\n    }\n\n    this.scope.fire('interactable:new', {\n      target,\n      options,\n      interactable,\n      win: this.scope._win,\n    })\n\n    return interactable\n  }\n\n  get (target: Target, options?: Options) {\n    const context = (options && options.context) || this.scope.document\n    const isSelector = is.string(target)\n    const targetMappings: InteractableScopeProp[] = isSelector\n      ? this.selectorMap[target as string]\n      : (target as any)[this.scope.id]\n\n    if (!targetMappings) {\n      return null\n    }\n\n    const found = arr.find(\n      targetMappings,\n      (m) => m.context === context && (isSelector || m.interactable.inContext(target as any)),\n    )\n\n    return found && found.interactable\n  }\n\n  forEachMatch<T> (node: Node, callback: (interactable: Interactable) => T) {\n    for (const interactable of this.list) {\n      let ret: void | T\n\n      if (\n        (is.string(interactable.target)\n          ? // target is a selector and the element matches\n          is.element(node) && domUtils.matchesSelector(node, interactable.target)\n          : // target is the element\n          node === interactable.target) &&\n        // the element is in context\n        interactable.inContext(node)\n      ) {\n        ret = callback(interactable)\n      }\n\n      if (ret !== undefined) {\n        return ret\n      }\n    }\n  }\n}\n"
	],
	"mappings": "UAIYA,MAAS,iCACTC,MAAc,mCACnBC,MAAY,iCACZC,MAAQ,6BAkBR,MAAMC,gBAEXC,KAAuB,GAEvBC,YAEI,GAEJC,MAEAC,YAAaD,GACXE,KAAKF,MAAQA,EACbA,EAAMG,aAAa,CACjB,qBAAsB,EAAGC,mBACvB,MAAMC,OAAEA,EAAQC,SAAUC,GAAYH,EAChCI,EAA0CZ,EAAGa,OAAOJ,GACtDH,KAAKH,YAAYM,GAChBA,EAAeH,KAAKF,MAAMU,IAEzBC,EAAclB,EAAImB,UAAUJ,GAAiBK,GAAMA,EAAEN,UAAYA,IACnEC,EAAeG,KAEjBH,EAAeG,GAAaJ,QAAU,KACtCC,EAAeG,GAAaP,aAAe,MAE7CI,EAAeM,OAAOH,EAAa,MAKzCI,IAAKV,EAAgBW,GACnBA,EAAUrB,EAAOqB,GAAW,GAAI,CAC9BC,QAASf,KAAKF,MAAMiB,UAEtB,MAAMb,EAAe,IAAIF,KAAKF,MAAMkB,aAAab,EAAQW,EAASd,KAAKF,MAAMmB,SAAUjB,KAAKF,MAAMoB,QAC5FC,EAAc,CAAEd,QAASH,EAAaE,SAAUF,gBA4BtD,OA1BAF,KAAKF,MAAMsB,YAAYlB,EAAamB,MACpCrB,KAAKJ,KAAK0B,KAAKpB,GAEXR,EAAGa,OAAOJ,IACPH,KAAKH,YAAYM,KACpBH,KAAKH,YAAYM,GAAU,IAE7BH,KAAKH,YAAYM,GAAQmB,KAAKH,KAExBjB,EAAaC,OAAeH,KAAKF,MAAMU,KAC3Ce,OAAOC,eAAerB,EAAQH,KAAKF,MAAMU,GAAI,CAC3CiB,MAAO,GACPC,cAAc,IAIhBvB,EAAeH,KAAKF,MAAMU,IAAIc,KAAKH,IAGvCnB,KAAKF,MAAM6B,KAAK,mBAAoB,CAClCxB,SACAW,UACAZ,eACA0B,IAAK5B,KAAKF,MAAM+B,OAGX3B,EAGT4B,IAAK3B,EAAgBW,GACnB,MAAMT,EAAWS,GAAWA,EAAQT,SAAYL,KAAKF,MAAMmB,SACrDc,EAAarC,EAAGa,OAAOJ,GACvBG,EAA0CyB,EAC5C/B,KAAKH,YAAYM,GAChBA,EAAeH,KAAKF,MAAMU,IAE/B,IAAKF,EACH,OAAO,KAGT,MAAM0B,EAAQzC,EAAI0C,KAChB3B,GACCK,GAAMA,EAAEN,UAAYA,IAAY0B,GAAcpB,EAAET,aAAagC,UAAU/B,MAG1E,OAAO6B,GAASA,EAAM9B,aAGxBiC,aAAiBC,EAAYC,GAC3B,IAAK,MAAMnC,KAAgBF,KAAKJ,KAAM,CACpC,IAAI0C,EAcJ,IAXG5C,EAAGa,OAAOL,EAAaC,QAEtBT,EAAG6C,QAAQH,IAAS5C,EAASgD,gBAAgBJ,EAAMlC,EAAaC,QAEhEiC,IAASlC,EAAaC,SAExBD,EAAagC,UAAUE,KAEvBE,EAAMD,EAASnC,SAGLuC,IAARH,EACF,OAAOA"
}