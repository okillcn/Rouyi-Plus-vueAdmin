import "./chunk-AC2VUBZ6.js";

// node_modules/js-table2excel/index.js
var idTmr;
var getExplorer = () => {
  let explorer = window.navigator.userAgent;
  if (explorer.indexOf("MSIE") >= 0) {
    return "ie";
  } else if (explorer.indexOf("Firefox") >= 0) {
    return "Firefox";
  } else if (explorer.indexOf("Chrome") >= 0) {
    return "Chrome";
  } else if (explorer.indexOf("Opera") >= 0) {
    return "Opera";
  } else if (explorer.indexOf("Safari") >= 0) {
    return "Safari";
  }
};
var exportToExcel = (data, name) => {
  if (getExplorer() == "ie") {
    tableToIE(data, name);
  } else {
    tableToNotIE(data, name);
  }
};
var tableToIE = (data, name) => {
  let curTbl = data;
  let oXL = new ActiveXObject("Excel.Application");
  let oWB = oXL.Workbooks.Add();
  let xlsheet = oWB.Worksheets(1);
  let sel = document.body.createTextRange();
  sel.moveToElementText(curTbl);
  sel.select;
  sel.execCommand("Copy");
  xlsheet.Paste();
  oXL.Visible = true;
  try {
    let fname2 = oXL.Application.GetSaveAsFilename("Excel.xls", "Excel Spreadsheets (*.xls), *.xls");
  } catch (e) {
    print("Nested catch caught " + e);
  } finally {
    oWB.SaveAs(fname);
    oWB.Close(savechanges = false);
    oXL.Quit();
    oXL = null;
    window.setInterval("Cleanup();", 1);
    idTmr = window.setInterval("Cleanup();", 1);
  }
};
var tableToNotIE = function() {
  const uri = "data:application/vnd.ms-excel;base64,", template = '<html xmlns:o="urn:schemas-microsoft-com:office:office" xmlns:x="urn:schemas-microsoft-com:office:excel" xmlns="http://www.w3.org/TR/REC-html40"><head><meta charset="UTF-8"><!--[if gte mso 9]><xml><x:ExcelWorkbook><x:ExcelWorksheets><x:ExcelWorksheet><x:Name>{worksheet}</x:Name><x:WorksheetOptions><x:DisplayGridlines/></x:WorksheetOptions></x:ExcelWorksheet></x:ExcelWorksheets></x:ExcelWorkbook></xml><![endif]--></head><body><table>{table}</table></body></html>';
  const base64 = function(s) {
    return window.btoa(unescape(encodeURIComponent(s)));
  };
  const format = (s, c) => {
    return s.replace(
      /{(\w+)}/g,
      (m, p) => {
        return c[p];
      }
    );
  };
  return (table, name) => {
    const ctx = {
      worksheet: name,
      table
    };
    const url = uri + base64(format(template, ctx));
    if (navigator.userAgent.indexOf("Firefox") > -1) {
      window.location.href = url;
    } else {
      const aLink = document.createElement("a");
      aLink.href = url;
      aLink.download = name || "";
      let event;
      if (window.MouseEvent) {
        event = new MouseEvent("click");
      } else {
        event = document.createEvent("MouseEvents");
        event.initMouseEvent("click", true, false, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null);
      }
      aLink.dispatchEvent(event);
    }
  };
}();
var table2excel = (column, data, excelName) => {
  const typeMap = {
    image: getImageHtml,
    text: getTextHtml
  };
  let thead = column.reduce((result, item) => {
    result += `<th>${item.title}</th>`;
    return result;
  }, "");
  thead = `<thead><tr>${thead}</tr></thead>`;
  let tbody = data.reduce((result, row) => {
    const temp = column.reduce((tds, col) => {
      tds += typeMap[col.type || "text"](row[col.key], col);
      return tds;
    }, "");
    result += `<tr>${temp}</tr>`;
    return result;
  }, "");
  tbody = `<tbody>${tbody}</tbody>`;
  const table = thead + tbody;
  exportToExcel(table, excelName);
  function getTextHtml(val) {
    return `<td style="text-align: center">${val}</td>`;
  }
  function getImageHtml(val, options) {
    options = Object.assign({ width: 40, height: 60 }, options);
    return `<td style="width: ${options.width}px; height: ${options.height}px; text-align: center; vertical-align: middle"><img src="${val}" width=${options.width} height=${options.height}></td>`;
  }
};
var js_table2excel_default = table2excel;
export {
  js_table2excel_default as default
};
//# sourceMappingURL=js-table2excel.js.map
